---
import "../styles/styles.css";
---

<div id="sidebar">
    <h1 style="margin-top: 0">Liquiprism (WIP)</h1>
    <div>
        <button id="togglePlay" class="play-button">play</button>
    </div>

    <label for="dimension">dimension:</label>
    <div class="slider-container">
        <span id="minValue">1</span>
        <input
            type="range"
            id="dimension"
            name="dimension"
            min="1"
            max="21"
            value="7"
            oninput="updateDimensionSliderValue(this)"
        />
        <span id="maxValue">21</span>
    </div>

    <label for="speed">speed:</label>
    <div class="slider-container">
        <span id="minValue">0.5x</span>
        <input
            type="range"
            id="speed"
            name="speed"
            min="0.5"
            max="5"
            value="1"
            step="0.5"
            oninput="updateSpeedSliderValue(this)"
        />
        <span id="maxValue">5x</span>
    </div>

    <div class="form-group">
        <label for="randomUpdateRate">random update rate:</label>
        <input
            type="checkbox"
            id="randomUpdateRate"
            name="randomUpdateRate"
            onchange="updateRandomUpdateRate(this)"
        />
    </div>

    <div id="legend">
        <table class="legend-table">
            <tr class="legend-item legend-header">
                <th>c</th>
                <th>r</th>
                <th>i</th>
                <th>m</th>
            </tr>
            <tr class="legend-item" id="legend-front">
                <td class="color-box"></td>
                <td class="update-rate"></td>
                <td class="instrument"></td>
                <td>
                    <input
                        type="checkbox"
                        id="muteFace"
                        name="muteFace"
                        onchange="setMuteFace(this)"
                    />
                </td>
            </tr>
            <tr class="legend-item" id="legend-back">
                <td class="color-box"></td>
                <td class="update-rate"></td>
                <td class="instrument"></td>
                <td>
                    <input
                        type="checkbox"
                        id="muteFace"
                        name="muteFace"
                        onchange="setMuteFace(this)"
                    />
                </td>
            </tr>
            <tr class="legend-item" id="legend-left">
                <td class="color-box"></td>
                <td class="update-rate"></td>
                <td class="instrument"></td>
                <td>
                    <input
                        type="checkbox"
                        id="muteFace"
                        name="muteFace"
                        onchange="setMuteFace(this)"
                    />
                </td>
            </tr>
            <tr class="legend-item" id="legend-right">
                <td class="color-box"></td>
                <td class="update-rate"></td>
                <td class="instrument"></td>
                <td>
                    <input
                        type="checkbox"
                        id="muteFace"
                        name="muteFace"
                        onchange="setMuteFace(this)"
                    />
                </td>
            </tr>
            <tr class="legend-item" id="legend-top">
                <td class="color-box"></td>
                <td class="update-rate"></td>
                <td class="instrument"></td>
                <td>
                    <input
                        type="checkbox"
                        id="muteFace"
                        name="muteFace"
                        onchange="setMuteFace(this)"
                    />
                </td>
            </tr>
            <tr class="legend-item" id="legend-bottom">
                <td class="color-box"></td>
                <td class="update-rate"></td>
                <td class="instrument"></td>
                <td>
                    <input
                        type="checkbox"
                        id="muteFace"
                        name="muteFace"
                        onchange="setMuteFace(this)"
                    />
                </td>
            </tr>
        </table>
    </div>
    <div class="explainer">
        <p>c: color</p>
        <p>r: update rate</p>
        <p>i: instrument</p>
        <p style="margin-bottom: 0">m: mute</p>
    </div>
</div>

<script is:inline>
    let playing = false;

    function togglePlay() {
        playing = !playing;
        const button = document.getElementById("togglePlay");
        button.textContent = playing ? "pause" : "play";
        button.classList.toggle("playing");
        const event = new CustomEvent("togglePlay", {
            detail: { playing },
        });
        document.dispatchEvent(event);
    }

    document.getElementById("togglePlay").addEventListener("click", togglePlay);

    document.addEventListener("keydown", (e) => {
        if (e.code === "Space") {
            e.preventDefault();
            togglePlay();
        }
    });

    function updateDimensionSliderValue(slider) {
        slider.setAttribute("data-value", slider.value);
        const event = new CustomEvent("dimensionChange", {
            detail: { dimension: slider.value },
        });
        document.dispatchEvent(event);
    }

    function updateSpeedSliderValue(slider) {
        slider.setAttribute("data-value", slider.value);
        const event = new CustomEvent("speed", {
            detail: { speed: slider.value },
        });
        document.dispatchEvent(event);
    }

    function updateRandomUpdateRate(checkbox) {
        const event = new CustomEvent("randomUpdateRateChange", {
            detail: { randomUpdateRate: checkbox.checked },
        });
        document.dispatchEvent(event);
    }

    function setMuteFace(checkbox) {
        const facePosition = checkbox.parentElement.parentElement.id
            .split("-")[1]
            .toUpperCase();
        const event = new CustomEvent("setMuteFace", {
            detail: { facePosition, muted: checkbox.checked },
        });
        document.dispatchEvent(event);
    }

    document.addEventListener("DOMContentLoaded", () => {
        const dimension_slider = document.getElementById("dimension");
        if (dimension_slider instanceof HTMLInputElement) {
            updateDimensionSliderValue(dimension_slider);
        }

        const speed_slider = document.getElementById("speed");
        if (speed_slider instanceof HTMLInputElement) {
            updateSpeedSliderValue(speed_slider);
        }
    });

    document.addEventListener("updateLegendVisualizer", (event) => {
        const legendData = event.detail.legendData;
        legendData.forEach((face) => {
            const legendItem = document.getElementById(
                `legend-${face.position.toLowerCase()}`,
            );
            if (legendItem) {
                legendItem.querySelector(".color-box").style.backgroundColor =
                    face.color;
                legendItem.querySelector(".update-rate").textContent =
                    `${face.updateRate}`;
            }
        });
    });

    document.addEventListener("updateLegendSonifier", (event) => {
        const legendData = event.detail.legendData;
        legendData.forEach((data) => {
            const legendItem = document.getElementById(
                `legend-${data.position}`,
            );
            if (legendItem) {
                legendItem.querySelector(".instrument").textContent =
                    `${data.instrument}`;
            } else {
                console.log("no legend item found");
            }
        });
    });
</script>
